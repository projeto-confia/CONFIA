# system configuration parameters

class Config(object):
    
    # logging
    class LOGGING(object):
        VERBOSE = False
        SMTP_LOG = False
        FILE_PATH = 'logs/automata.log'
        NAME = 'automata'
    
    # system
    class STATUS(object):
        STOPPED = 0
        RUNNING = 1
        ERROR   = 2
    
    # engine
    class ENGINE(object):
        FREQUENCY = 21600  # 21.600 seconds == 6 hours
        MONITOR_ACTIVATED = True
        FACT_CHECK_MANAGER_ACTIVATED = True
        DETECTOR_ACTIVATED = True
        INTERVENTOR_ACTIVATED = True
        SCRAPING_ACTIVATED = True
        
    # monitor
    class MONITOR(object):
        STREAM_TIME = 1200  # 1.200 seconds == 20 minutes
        SEARCH_TAGS = ["COVID", "covid", "Covid",
                       "CORONAVIRUS", "Coronavirus", "coronavirus",
                       "CORONAVÍRUS", "Coronavírus", "coronavírus",
                       "COVID-19", "Covid-19", "covid-19",
                       "VACINA", "Vacina", "vacina", 
                       "PANDEMIA", "pandemia", "Pandemia",
                       "PFIZER", "Pfizer", "pfizer", 
                       "CORONAVAC", "coronavac", "Coronavac", "CoronaVac",
                       "JOHNSON", "johnson", "Johnson",
                       "OXFORD", "oxford", "Oxford",
                       "ASTRAZENECA", "astrazeneca", "Astrazeneca", "AstraZeneca",
                       "SPUTINIK", "sputinik", "Sputinik"]
        WINDOW_SIZE = 30


    # detector
    class DETECTOR(object):
        TRAIN_ICS = False

    # interventor
    class INTERVENTOR(object):
        WINDOW_SIZE = 7
        PROB_CLASSIF_THRESHOLD = 0.9
        NUM_NEWS_TO_SELECT = 4
        CURATOR = True
        SOCIAL_MEDIA_ALERT_ACTIVATE = False

    class FCMANAGER(object):
        SOCIAL_MEDIA_ALERT_ACTIVATE = False

    # e-mail account
    class EMAIL(object):
        ACCOUNT = 'account_name@server.com'
        PASSWORD = 'there_is_no_spoon'

    # twitter credentials
    class TWITTER_CREDENTIAL:
        CONSUMER_KEY = "consumer_key_here"
        CONSUMER_SECRET = "consumer_secret_here"
        ACCESS_TOKEN = "access_token_here"
        ACCESS_TOKEN_SECRET = "access_token_secret_here"
        
    # text preprocessor
    class TEXT_PREPROCESSOR:
        DEFAULT_THRESHOLD = 70

    class DATABASE:
        HOST = 'localhost'
        PORT = 'port_here'
        NAME = 'db_name_here'
        USER = 'db_user_here'
        PASSWORD = 'db_user_password_here'

    class SCHEDULE:
        """Class responsible for defining the configuration parameters for each scheduled job that will be persisted and consumed from AUTOMATA.
        """
        
        INTERVENTOR_JOBS_FILE = 'jobs/interventor_jobs.pkl'
        FCMANAGER_JOBS_FILE   = 'jobs/fcmanager_jobs.pkl'
        
        class QUEUE(Enum):
            """
            IMPORTANT: when defining a new queue, please create it with a prefix named after the corresponding module which it refers to. Follow the examples below already defined.
            """
            
            INTERVENTOR_SEND_NEWS_TO_FCA = auto()
            INTERVENTOR_SEND_ALERT_TO_SOCIAL_MEDIA = auto()
            FCAMANAGER_RECEIVE_LABELED_NEWS_IN_XLSX = auto() #! test purposes only.
        
        """For each schedule type, the following parameters were defined:
            - max_attempts: the maximum number of attempts before considering the job a failed job;
            
            - periodicity: when the scheduler will trigger the job and consume it based on its date of creation that is persisted in Job/Failed_Job tables;
            
            - payload_keys: the keys that will keep track of their corresponding information in JSON format.
        """
        SCHEDULE_PARAMS = {
            
            QUEUE.INTERVENTOR_SEND_NEWS_TO_FCA: {
                "max_attempts": 5,
                "periodicity": 3, # in days.
                "payload_keys": ("news", "alert_type"),
            },
            
            QUEUE.INTERVENTOR_SEND_ALERT_TO_SOCIAL_MEDIA: {
                "max_attempts": 5,
                "periodicity": 1, # in days.
                "payload_keys": ("news", "alert_type"),
            },
            
            #! test purposes only.
            QUEUE.FCAMANAGER_RECEIVE_LABELED_NEWS_IN_XLSX: {
                "max_attempts": 4,
                "periodicity": 2, # in days.
                "payload_keys": ("news", "label"),
            }
        }